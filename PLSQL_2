1/10
MD ARBAZ KHAN
16928
Subprograms and Packages
Subprograms (Procedures and Functions) 
Practice 1 
• Create a procedure called USER_QUERY_EMP that accepts three parameters. Parameter 
p_myeno is of IN parameter mode which provides the empno value. The other two 
parameters p_myjob and p_mysal are of OUT mode. The procedure retrieves the SAL
and job of an employee with the provided employee number and assigns those to the 
two OUT parameters respectively. The procedure should handle the error if the empno 
does not exist in the EMP table by displaying an appropriate message. Use bind variables 
for the two OUT Parameters. 
• Compile the code, invoke the procedure, and display the SAL and job title for employee 
number 7839. Do the same for employee number 7123. 
ANS –
CREATE OR REPLACE PROCEDURE USER_QUERY_EMP_ARBAZ (
P_MYENO IN EMPLOYEES1.EMPLOYEE_ID%TYPE,
P_MYJOB OUT EMPLOYEES1.JOB_ID%TYPE,
P_MYSAL OUT EMPLOYEES1.SAL%TYPE
) 
 
AS
BEGIN 
SELECT JOB_ID , SAL INTO P_MYJOB , P_MYSAL FROM EMPLOYEES1 
WHERE EMPLOYEE_ID = P_MYENO;
EXCEPTION
WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('INVALID EMPLOYEE 
ID');
END;
DECLARE
P_MYENO EMPLOYEES1.EMPLOYEE_ID%TYPE := &EMP_ID;
P_MYJOB EMPLOYEES1.JOB_ID%TYPE;
P_MYSAL EMPLOYEES1.SAL%TYPE := -1;
BEGIN
USER_QUERY_EMP_ARBAZ( P_MYENO, P_MYJOB, P_MYSAL );
IF P_MYSAL>0
THEN 
DBMS_OUTPUT.PUT_LINE('SAL : '||P_MYSAL || 'JOB TITLE : '||P_MYJOB);
END IF;
END;
2/10
Practice 2 
• Create a function named USER_ANNUAL_COMP that has a parameter p_eno for passing 
on the values of an employee number of the employee. The function calculates and 
returns the annual compensation of the employee by using the following formula. 
 annual_compensation = (p_sal+p_comm)*12 
 If the SAL or commission value is NULL then zero should be substituted for it. 
• Give a call to USER_ANNUAL_COMP from a SELECT statement, against the EMP table. 
ANS –
CREATE OR REPLACE FUNCTION USER_ANNUAL_COMP_ARBAZ (
P_ENO EMPLOYEES1.EMPLOYEE_ID%TYPE
) RETURN NUMBER
IS
ANNUAL_COMPENSATION NUMBER;
P_SAL EMPLOYEES1.SALARY%TYPE;
P_COMM EMPLOYEES1.COMMISSION_PCT%TYPE;
BEGIN
SELECT SALARY, COMMISSION_PCT INTO P_SAL, P_COMM FROM EMPLOYEES1 
WHERE EMPLOYEE_ID = P_ENO;
 IF P_SAL IS NULL THEN P_SAL :=0;
 END IF;
 IF P_COMM IS NULL THEN P_COMM:=0;
 END IF;
 ANNUAL_COMPENSATION := (P_SAL + P_COMM) *12;
 RETURN ANNUAL_COMPENSATION;
END;
 
DECLARE
P_MYENO EMPLOYEES1.EMPLOYEE_ID%TYPE := &EMP_ID;
ANNUAL_COMP NUMBER;
BEGIN
SELECT USER_ANNUAL_COMP(P_MYENO) INTO ANNUAL_COMP FROM 
EMPLOYEES1 WHERE EMPLOYEE_ID = P_MYENO;
DBMS_OUTPUT.PUT_LINE('ANNUAL_COMPENSATION : '||ANNUAL_COMP);
END;
3/10
Practice 3 
• Create a function named USER_VALID_DEPTNO that has a single parameter p_dno to 
accept a department number and returns a BOOLEAN value. The function returns TRUE if 
the department number exists in the DEPT table else it returns FALSE. 
• Create a procedure named SHOW_STRENGTH that accepts department number in a 
single parameter p_deptno from user. The procedure gives a call to 
USER_VALID_DEPTNO. If the function returns TRUE then the procedure finds out how 
many employees are there in the department from the EMP table and displays the same 
on the screen. If the function returns FALSE then the procedure displays an appropriate 
error message. 
• Give call to SHOW_STRENGTH by passing on department number 10. Do the same for 
department number 76 
ANS –
 USER_VALID_DEPTNO
CREATE OR REPLACE FUNCTION USER_VALID_DEPTNO_ARBAZ (
P_DNO DEPARTMENT.DEPID%TYPE
) RETURN BOOLEAN
AS
IS_DEP BOOLEAN :=TRUE;
COUNTNUM NUMBER :=0;
BEGIN
SELECT COUNT(*) INTO COUNTNUM FROM DEPARTMENT WHERE DEPID = 
P_DNO;
IF COUNTNUM>0 THEN RETURN TRUE;
ELSE RETURN FALSE;
END IF;
END;
DECLARE 
P_DNO DEPARTMENT.DEPID%TYPE := &D_ID;
BEGIN
IF USER_VALID_DEPTNO_ARBAZ(P_DNO)
THEN
DBMS_OUTPUT.PUT_LINE('DEPARTMENT ID IS VALID');
ELSE
DBMS_OUTPUT.PUT_LINE('DEPARTMENT ID IS NOT VALID');
END IF;
END;
4/10
SHOW_STRENGTH
CREATE OR REPLACE PROCEDURE SHOW_STRENGTH_ARBAZ (
P_DEPTNO DEPARTMENT.DEPID%TYPE
)
AS 
COUNTNUM NUMBER;
BEGIN
IF USER_VALID_DEPTNO (P_DEPTNO)
THEN
SELECT COUNT(*) INTO COUNTNUM FROM DEPARTMENT WHERE DEPID = 
P_DEPTNO;
DBMS_OUTPUT.PUT_LINE('NUMBER OF EMPLOYEES WITH DEPARTMENT ID' || 
P_DEPTNO ||' IS ' || CNT);
ELSE
DBMS_OUTPUT.PUT_LINE('DEPARMENT ID IS INVALID');
END IF;
END;
DECLARE
P_DEPTNO DEPARTMENT.DEPID%TYPE := &D_ID;
BEGIN
SHOW_STRENGTH(P_DEPTNO);
END;
 CALLING SHOW_STRENGTH
DECLARE 
BEGIN
SHOW_STRENGTH_ARBAZ('4');
END;
5/10
Practice 4 
• Create a procedure named SHOW_RECORDS that accepts a single parameter 
p_join_date. The procedure determines and displays on the screen, the details of the 
employees who have joined after p_join_date, in the following format. Employees 
Joined after ddth, Month yyyy 
EMPLOYEE NAME JOB SAL DEPARTMENT 
_____________________________________________________________ 
XXXXXXXX XXXXX 99,999 99 
XXXXXXXX XXXXX 99,999 99 
The procedure should display appropriate message if there is no employee who joined after 
p_join_date . 
• Give a call to SHOW_RECORDS from an anonymous PL/SQL block 
ANS –
CREATE OR REPLACE PROCEDURE SHOW_RECORDS_ARBAZ (
P_JOIN_DATE DATE
)
AS
CURSOR C1 IS 
SELECT * FROM EMPLOYEES1 WHERE JOIN_DATE>P_JOIN_DATE;
E1 EMPLOYEES1%ROWTYPE;
COUNTNUM NUMBER:=0;
BEGIN
SELECT COUNT(*) INTO COUNTNUM FROM EMPLOYEES1 WHERE 
JOIN_DATE>P_JOIN_DATE;
IF COUNTNUM >0
THEN DBMS_OUTPUT.PUT_LINE('EMPLOYEES JOINED AFTER' || P_JOIN_DATE);
OPEN C1;
LOOP
FETCH C1 INTO E1;
DBMS_OUTPUT.PUT_LINE(E1.NAME || ' ' || E1.JOB || ' ' || E1.SALARY || 
'' || E1.DEPID);
EXIT WHEN C1%NOTFOUND;
END LOOP;
CLOSE C1;
ELSE
DBMS_OUTPUT.PUT_LINE('NO EMPLOYEE JOINED AFTER ' || P_JOIN_DATE);
END IF;
END;
6/10
Practice 5 
• Create a procedure named ADD_EMPLOYEE to hire an employee. Parameters to the 
procedure are job, mgr, hiredate, SAL, commission and deptno. Validate the following: 
a. Employee number is not taken as a parameter but is auto generated by using a 
SEQUENCE. 
b. Job is either ‘CLERK’ or ‘ANALYST’ or ‘SALESMAN’. The input value can be 
entered in any case (upper or lower or initcap). c. Mgr is an existing employee. 
d. Hiredate is less than system date. 
e. SAL must be greater than 800 
f. Commission is not null if the job is SALESMAN. For any other job, commission may be 
null. 
g. Deptno must exist in the DEPT table. 
Insert the record if the above validations are met and display a message ‘1 row 
inserted’. If the row is not inserted generate an exception and handle it by displaying an 
appropriate message. 
• Give a call to ADD_EMPLOYEE through an anonymous PL/SQL block 
ANS –
CREATE OR REPLACE PROCEDURE ADD_EMPLOYEE (
JOB IN EMPLOYEE1.JOB_ID%TYPE,MGR IN 
EMPLOYEE1.MANAGER_ID%TYPE ,HIREDATE IN 
DATE,SALARY IN EMPLOYEE1.SALARY%TYPE, 
COMISSION IN 
EMPLOYEE1.COMMISSION_PCT%TYPE,DEPTNO IN 
EMPLOYEE1.DEPARTMENT_ID%TYPE
)
AS 
ENUM EMPLOYEE1.EMPLOYEE_ID%TYPE; 
NOT_INSERTED EXCEPTION; 
NCOUNT NUMBER(3); 
NCOUNTD NUMBER(3);
CURRDATE DATE; 
BEGIN
ENUM:=EMP74_SEQ.NEXTVAL;
SELECT COUNT(*) INTO NCOUNTD FROM DEPARTMENT WHERE DEPTNO = 
DEPTNO; SELECT COUNT(*) INTO NCOUNT FROM EMPLOYEE1 WHERE 
EMPLOYEE_ID=MGR; 
SELECT CURRENT_DATE INTO CURRDATE FROM DUAL;
IF NOT(JOB IN( 'CLERK', 'ANALYST', 'SALESMAN')) THEN 
RAISE NOT_INSERTED; 
7/10
ELSIF(NCOUNT=0)THEN RAISE NOT_INSERTED; 
ELSIF(HIREDATE>=CURRDATE)THEN RAISE NOT_INSERTED; 
ELSIF(SALARY<800)THEN RAISE NOT_INSERTED; 
ELSIF(COMISSION IS NULL) AND (JOB='SALESMAN')THEN 
RAISE NOT_INSERTED; 
ELSIF(NCOUNTD=0)THEN RAISE NOT_INSERTED;
END IF;
INSERT INTO EMPLOYEE1 VALUES 
(ENUM,'STAR','CHECK','STARCHECH@GMAI','123456789', IREDATE,
JOB,SALARY, COMISSION,MGR,DEPTNO); 
EXCEPTION 
WHEN NOT_INSERTED THEN DBMS_OUTPUT.PUT_LINE('ROW NOT ABLE 
TO INSERT'); 
END; 
 
 
CREATE SEQUENCE EMPOYEE1_seq 
START WITH 1000 
INCREMENT BY 1 
NOCACHE 
NOCYCLE; 
Practice 6 
• Create a function named FIND_SAL_GRADE which accepts SAL of an employee finds the 
corresponding SAL grade from SALGRADE table and returns the grade. The function 
should raise an exception if the SAL value does not fit in any of the SAL ranges specified 
in the salgrade table. 
• Create a procedure CALL_FIND_SAL_GRADE that does not accept any parameter. The
procedure gives call to FIND_SAL_GRADE for each record in the emp table by passing on 
the SAL value from the current record. The procedure displays the corresponding 
employee number, employee name and the SAL grade returned by FIND_SAL_GRADE, 
on the screen. The procedure should handle error thrown by the function by displaying 
an appropriate message. 
• Give a call to CALL_FIND_SAL_GRADE through an anonymous PL/SQL block 
ANS –
CREATE OR REPLACE FUNCTION FIND_SAL_GRADE (
E_SALARY
EMPLOYEES1.SALARY%TYPE
) RETURN SALGRADE.GRADE%TYPE
AS
E_GRADE SALGRADE.GRADE%TYPE :=0;
BEGIN
8/10
SELECT GRADE INTO E_GRADE FROM SALGRADE WHERE E_SALARY > 
MIN_SALARY AND
E_SALARY <MAX_SALARY;
EXCEPTION 
WHEN NO_DATA_FOUND
THEN
DBMS_OUTPUT.PUT_LINE('SALARY RANGE NOT MATCHED');
RETURN E_GRADE;
END;
CREATE OR REPLACE PROCEDURE CALL_FIND_SAL_GRADE 
AS
E_SALGRADE VARCHAR(1);
E EMPLOYEES1%ROWTYPE;
BEGIN
SELECT * INTO E FROM EMPLOYEES1 WHERE EMPLOYEE_ID =1;
E_SALGRADE := FIND_SAL_GRADE(E.SALARY);
DBMS_OUTPUT.PUT_LINE(E.ID || ' ' || E.NAME || '' ||E_SALGRADE);
END;
DECLARE
BEGIN
CALL_FIND_SAL_GRADE ;
END;
9/10
PACKAGES 
Practice 7 
• Create a package named MANAGE_EMP_PACK that has two public procedures, two 
package level variables and a private function. The public procedure HIRE_EMP adds an 
employee record in EMP table and the public procedure FIRE_EMP deletes an employee 
record from the EMP table. The two variables v_insert_cnt and v_delete_cnt are used in 
the package, for keeping record of the numbers of times insert / delete has been 
executed. 
Create a private function VALIDATE_EMP in the package to validate employee number. 
This function can be called from HIRE_EMP and FIRE_EMP. 
• The function VALIDATE_EMP accepts an employee number in a parameter p_eno and 
returns TRUE if the value of employee number exists in the EMP table else it returns 
FALSE. 
• The procedure HIRE_EMP takes all the column values of the EMP table as parameters. It 
gives a call to VALIDATE_EMP by passing on the value of employee number and if the 
function returns TRUE then it displays message ‘Employee number already in use’. If the 
function returns FALSE then it inserts a new record in the EMP table and displays a 
message ‘One employee added’. It also increments the value of v_insert_cnt by 1. 
• The procedure FIRE_EMP accepts an employee number as a parameter and gives a call 
to VALIDATE_EMP by passing on the value of employee number. If the function returns 
TRUE then it deletes the corresponding record from the EMP table, displays message 
‘One employee deleted’ and increments the value of v_delete_cnt by 1. If the function 
returns FALSE then it displays message ‘Wrong employee number’. 
• Check working of the methods in MANAGE_EMP_PACK by giving calls to the public 
procedures and by displaying value of the appropriate package variable, through an 
anonymous block 
Practice 8 
10/10
• Create a package named MY_EMP_PACK having two overloaded functions named 
GET_AVG_SAL. The first function accepts ename as a parameter while the second 
function accepts empno as a parameter and both return the average SAL paid in the 
department to which the employee belongs. Both the functions should handle the 
exception for non-existing employee by displaying an appropriate error message. 
• Give a call to GET_AVG_SAL through an anonymous PL/SQL block by passing on 
employee number 7839. Do the same again by passing on employee name ‘KING’. 
